[
  {
    "id": "project1",
    "name": "Suzuki Teaching Points",
    "intro": "When I was told that I had to make yet another written assignment during my Suzuki violin teaching course, I knew using a traditional word/pdf document with some images was not what I wanted. So I researched and decided to build an interactive web app to display the music scores and the pedagogical analysis on top of them.",
    "description": "This static site displays the scores from the Suzuki Violin Method books. A multi-layered, clickable SVG overlay holds the information on the piece structure and teaching points (also divided in right/left hands). The audio of the piece is also playable while looking at the score. Altough the site is built in  a very ineficient way, the result was very satisfactory and I look forward to rebuild the site using modern rendering template systems. Built using HTML, CSS and Javascript",
    "features": [
      { "name": "SVG", 
        "text": "Vector graphics offer very interesting possibilities in web design. In this case, I took advantage of inline SVG shapes made in Adobe Illustrator, with click events added, to toogle visibility of each layer of content.",
        "image": "suzuki-teaching-points/svg.png"
      },
      { "name": "Audio Playback",
        "text": "Studying the score while listening the recording is very enriching and sometimes necessary, and even better if you can have a look at the teaching points while doing so.",
        "image": "suzuki-teaching-points/audio.png"
      }
    ],
    "learning": "I learned simple HTML and CSS, with a bit of Javascript for the SVG interface. I also practised prototyping and SVG handling in Adobe Illustrator.",
    "problems": "The code is redundant, since each html file has a big css file that could be shared between all pages. The javascript code could be much simpler if it used functions and loops. And the architecure is funny, actually each page contains all the image files, html, css, js, and even font files instead of actually having them all in a shared folder.",
    "image": "suzuki-teaching-points.png",
    "url": "",
    "github": ""
  },
  {
    "id": "project2",
    "name": "Edain Ranked",
    "intro": "This was my first dynamic website, and it's building took months. I wanted to make a ranking site for an online game with replay storage. The app is hosted and built using Amazon Web Services, which was both a big challenge and lots of fun.",
    "description": "This app works in a simple way: Players register, upload games between each other, and recieve an ELO score based on their wins/loses. Their games and replays get stored, and the page displays a ranking, a replay list (with download links) and statistics from all the games played. Future plans include multilingual support, a replay parser (kindly written and gifted by FG15), and a season system. Built using HTML, CSS, Javascript, JQuery, Chartist.js, Node.js and MYSQL.",
    "features": [
      { "name": "Architecture",
        "text": "The frontend is hosted on S3 storage, which also stores the game replays. The REST API (using AWS's API Gateway) calls Lambda functions, which execute the server-side code that manages the MYSQL database. Cognito serves as user-management service.",
        "image": "edain-ranked/structure.png"},
      { "name": "Lambda functions",
        "text": "Go serverless! Having a server running 24/7 seemed overkill for a website with fairly low traffic. Lambda functions run on request every time the API calls them. In this way, we can handle the database CRUD operations easily on demand. The lambda functions themselves are coded using Node.js and its MYSQl library",
        "image": "edain-ranked/lambda.png"}, 
      { "name": "MYSQL database",
        "text": "The database stores all persistent information, such as players and their ranking, maps, replays, and historical ranking results. Various queries handled from the Lambda functions save and retrieve data. The queries use placeholders to prevent SQL injections.",
        "image": "edain-ranked/database.png"}, 
      { "name": "Chart library",
        "text": "In order to display statistics from the database, I decided to use a library to render data visually. I chose Chartist.js for their lightweight, svg-based library. It is easily customizable using CSS and its API is simple to use.",
        "image": "edain-ranked/charts.png"}
    ],
    "learning": "This project was a big task. On the one hand, I learned more about HTML and CSS, designed and built SVG images for the UI, and used a bit of JQuery. On the other hand, I needed to learn backend tecnologies such as Node.js, several AWS services and their APIs, and MYSQL for database queries.",
    "problems": "The frontend code is composed of CSS spaghettis and Js + JQuery spaghettis. There is a lot of unnecessary repetition, and the javascript code is not properly structured into separate files. Also, the loading times are very big because images are not optimized. The tables that display rankings and replays load all their items (+300!) at once.",
    "image": "edain-ranked.png",
    "url": "",
    "github": ""
  },
  {
    "id": "project3",
    "name": "BFME Reforged",
    "intro": "BFME Reforged is a fan-made remake in Unreal Engine 4 of the beloved classic 'The Lord of the Rings: The Battle for the Middle Earth' series. Learning C and C++ was very important for me as a begginer developer, and I worked hard to acquire the necessary skills that I would need in order to become a team member. Now, I work in the UI (mainly menus), where I design and organize the component development.",
    "description": "My work on BFME Reforged is focused on UI development. My first task was to build the Multiplayer Lobby, a menu where players can find all open games, create new rooms and join existing rooms. Now, I am organizing and developing the components needed for all the menus in order to make UI development faster in the long run, and easier to mantain. Built using C++ and Unreal Engine 4.",
    "features": [
      {
        "name": "UMG",
        "text": "UMG is UE4's UI system. We needed responsive and scalable widgets, I dived hard into UMG's tools to learn how to tile images, stretch them without losing quality/ratio, etc.",
        "image": "bfme-reforged/responsive.gif"},
      {
        "name": "C++ classes",
        "text": "The widgets have C++ parent classes that handle their behaviour and provide functionalty such as IP connections, networking, and database read/write operations.",
        "image": "bfme-reforged/cpp.png"},
      {
        "name": "Components",
        "text": "BFME's UI is complex. I fully realized it after building an entire menu using only 1 widget, which resulted in a lot of repetitive work and a nightmare widget tree. Also, the C++ class was handling way more functionalty than it should. Therefore, we decided to switch to component development, in order to agilize the work in the future and increase maintanabilty (the components shown feature 2D assets made by our artists).",
        "image": "bfme-reforged/components.png"}
    ],
    "learning": "Using C++ in a big project has been very enriching in lots of aspects. Besides working with Object Oriented Programming, I research into UE4's documentation constantly, look at code written by others, and learn to colaborate with the other team members. Having more experienced developers review my code is also very helpful.",
    "problems": "The widget system can increase in complexity very fast. Also, OOP requires careful consideration of how code is structured, which I didn't do properly at the beggining.",
    "image": "bfme-reforged.png",
    "url": "",
    "github": ""
  },
  {
    "id": "project4",
    "name": "Developer Portfolio (this)",
    "intro": "I love building apps to solve my own necessities, this portfolio is one of those apps. I wanted to use modern frameworks and display my ability to write clean, well organized and readable code. I chose Vue.js because it is growing in demand and popularity, and offers a gentle learning curve. Vue allows component-based development, and with Nuxt.js I could build a static site with all the advantages of server-side rendering.",
    "description": "All developers need a portfolio. I was finishing my Frontend Bootcamp, and I wanted to use the latest tools I had learned (Vue.js and Sass) to build a real project. At the same time, most of my previous projects suffered from spaghetti code. So I built my portfolio using Vue.js, focusing on simplicity and clean code. I also used Nuxt.js, in order to manage the static site generation, and Git for version control. Built using Nuxt.js, Bootstrap-Vue, Sass and vanilla Javascript.",
    "features": [
      { "name": "Hooks",
        "text": "Vue.js and Nuxt.js have a concrete lifetime cycle, which hooks help to manage. This way, we can optimize the loading times by doing server calls before the page is rendered in the DOM, and call other methods once the page is loaded.",
        "image": "vuejs-portfolio/hooks.png"},
      { "name": "Fancy CSS",
        "text": "Although I am not super interested in CSS animations or complicated effects, I had fun building a small algorithm that changed the color of the Navigation Bar based on the scroll position in the main page, so that it matched the gradient in the home section.",
        "image": "vuejs-portfolio/css.png"}, 
      { "name": "Dynamic components",
        "text": "One of my favourite things in Frameworks such as Vue is reusing code for components and passing dynamic data. Makes very simple to add new projects, modify the exisiting ones, and generally get new pages and content without writing more code: the data is all I have to care about!",
        "image": "vuejs-portfolio/components.png"}
    ],
    "learning": "Vue.js has been my first Frontend framework, and I loved using it. I also learned to implement Bootstrap-Vue and Sass using Nuxt.js, which is very useful and saved much development time, while helping me to organize the style code better",
    "problems": "",
    "image": "vuejs-portfolio.png",
    "url": "",
    "github": ""
  },
  {
    "id": "project5",
    "name": "F5 Notificator",
    "intro": "I was proposed to make a small Flutter app during my bootcamp, which turned into this small message/notification app. The goal was to send simple text notifications with a color that represented the urgency of the message. The app is not finished, the implementation of Firebase to handle notifiactions/messages is pending.",
    "description": "This app was inspired by the old beepers. It consists of a single page widget, which displays the latest message sent. On the first run, the user is required to store a username. After that, each message is sent using Firebase Messaging, and all users see it displayed on their main screen. Built using Flutter/Dart.",
    "features": [
      { "name": "Stateful/Stateless widgets",
        "text": "Flutter uses widgets to build entire applications. In order to improve performance, widgets are divided into stateless (therefore, not changing their appearance or content) or stateful (they are rebuilt each frame and update themselves based on a mutable state, which can hold variables, functions, etc.",
        "image": "f5-notificator/widgets.png"},
      { "name": "Material Design",
        "text": "Flutter has a very interesting and straightforward implementation of Google's Material Design system. It allows to build beautiful and responsive applications very fast and helps in designing/structuring UI/UX nicely.",
        "image": "f5-notificator/material-design.png"}, 
      { "name": "Shared Preferences",
        "text": "In order to save the name of each user, I used the Android's Shared Preferences to store the username after installation, and displaying it each time he/she sends a message.",
        "image": "f5-notificator/shared-preferences.png"}
    ],
    "learning": "Learning a bit of Dart was interesting, because it is type safe and therefore I grew more aware of types, how we use them in programming, and the differences between types in Dart, Javascript, or C-family languages. I also researched Google's Material Design guidelines and documentation, and gained basic knowledge of how Android apps work.",
    "problems": "The development was blocked because Firebase's implementation keep throwing errors constantly. Besides that, the code is written in a single file, which is not ideal even for a relatively small app. Flutter's widget trees can grow quickly and turn in a nested mess of UI elements, classes, methods, etc.",
    "image": "f5-notificator.png",
    "url": "",
    "github": ""
  }
]